[{"title":"前端代码规范(一)","date":"2019-10-30T06:57:16.000Z","path":"2019/10/30/my-first-blog/","text":"一. 团队协作第一步&emsp;&emsp;团队协作中 规范 对于合作非常重要。 是否经常遇到的问题： 1. 缩进应该是四个空格还是两个空格？ 2. 是否应该禁用 var？ 3. 接口名是否应该以 I 开头？ 4. 是否应该强制使用 === 而不是 ==？当团队的人员越来越多时，同样的逻辑不同的人写出来可能会有很大的区别，团队协作中应该尽量中和大家的风格，以达到减少项目之间的沟通，提高整体解决效率。 团队协作应该怎么做？ * 有些代码规范能用lint做强制审核 * 有些约定俗成的记录成文档形成规范二. lint做什么&emsp;&emsp;lint 就是代码检查，其主要目的是发现代码错误、统一代码风格； 当下已经有几种较为成熟且广泛的 JavaScript 代码规范检查方案: 1. Eslint + prettier 2. tslint + prettier…还是有其他的暂不提及 ## 2.1. ESLint&emsp;&emsp;Eslint是一个ECMAScript/JavaScript/JSX语法规则和代码风格的检查工具，可以用来保证写出语法正确、风格统一的代码。 &emsp;&emsp;npm 安装（Node.js (&gt;=6.14), npm version 3+） 12 npm install eslint --save-devor npm install eslint --global 全局安装 运行 eslint --init 之后，.eslintrc 文件会在你的文件夹中自动创建。你可以在 .eslintrc 文件中看到许多像这样的规则 1234567891011121314151617&#123; &quot;env&quot;: &#123; &quot;browser&quot;: true, &quot;es6&quot;: true &#125;, &quot;extends&quot;: &quot;eslint:recommended&quot;, &quot;globals&quot;: &#123; &quot;Atomics&quot;: &quot;readonly&quot;, &quot;SharedArrayBuffer&quot;: &quot;readonly&quot; &#125;, &quot;parserOptions&quot;: &#123; &quot;ecmaVersion&quot;: 2018, &quot;sourceType&quot;: &quot;module&quot; &#125;, &quot;rules&quot;: &#123; &#125;&#125; Ps. 当然这是对项目级别配置的，我们还可以对文件进行单独的配置： 使用JavaScript注释将配置信息直接嵌入到文件中。(/* eslint-disable no-new */)配置文件.eslintrc还可以是: 1. javascript：使用.eslintrc.js文件并导出一个包含配置的对象 2. YAML：.eslintrc.yaml或者.eslintrc.yml 3. JSON：.eslintrc.json，并且此文件允许使用JS形式的注释 Ps. 这些文件的优先级则是按照以上出现的顺序（.eslintrc.js &gt; .eslintrc.yaml &gt; .eslintrc.yml &gt; .eslintrc.json &gt; .eslintrc） 我们可以以 eslint index.js 或 eslint src/** 的方式来进行命令式运行（eslint命令） 具体配置项： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224&#123; # 指定环境（可以多个，看项目需要）即我们代码运行时支持哪个环境的全局变量 &quot;env&quot;: &#123; &quot;browser&quot;:true - browser 全局变量。(下面都如此) node - Node.js 全局变量和 Node.js 作用域。 commonjs - CommonJS 全局变量和 CommonJS 作用域 (仅为使用 Browserify/WebPack 写的只支持浏览器的代码)。 shared-node-browser - Node 和 Browser 通用全局变量。 es6 - 支持除模块外所有 ECMAScript 6 特性（该选项会自动设置 ecmaVersion解析器选项为 6）。 worker - web workers 全局变量。 amd - 定义 require() 和 define() 作为像 amd 一样的全局变量。 mocha - 添加所有的 Mocha 测试全局变量。 jasmine - 添加所有的 Jasmine 版本 1.3 和 2.0 的测试全局变量。 jest - Jest 全局变量。 phantomjs - PhantomJS 全局变量。 protractor - Protractor 全局变量。 qunit - QUnit 全局变量。 jquery - jQuery 全局变量。 prototypejs - Prototype.js 全局变量。 shelljs - ShellJS 全局变量。 meteor - Meteor 全局变量。 mongo - MongoDB 全局变量。 applescript - AppleScript 全局变量。 nashorn - Java 8 Nashorn 全局变量。 serviceworker - Service Worker 全局变量。 atomtest - Atom 测试全局变量。 embertest - Ember 测试全局变量。 webextensions - WebExtensions 全局变量。 greasemonkey - GreaseMonkey 全局变量。 &#125;, # 解析器选项 （ESLint 默认支持 ECMAScript 5 语法）这个option是用来修改支持的js语言选项 &quot;parserOptions&quot;: &#123; &quot;ecmaVersion&quot;: 6|7|8|9|10, - 也可以用年份 &quot;sourceType&quot;: &quot;script&quot; (默认) | &quot;module&quot;(如果你的代码是 ECMAScript 模块) &quot;ecmaFeatures&quot;: &#123; - 表示你想使用的额外的语言特性 &quot;jsx&quot;: true - 启用 JSX &quot;globalReturn&quot;:true - 允许在全局作用域下使用 return 语句 &quot;impliedStrict&quot; - 启用严格校验模式(如果 ecmaVersion 是 5 或更高) &quot;experimentalObjectRestSpread&quot;: true,//启用对对象的扩展 &#125; &#125;, # 解析器 默认是“espree” &quot;parser&quot;: &quot;babel-eslint&quot;, &quot;extends&quot;: &quot;eslint:recommended&quot; - 继承的规则 可以是项目相对路径或者其他配置名称或者[](推荐 Airbnb) # 代码检查规则 这是主要配置项 # &quot;off&quot; 或 0 - 关闭规则 # &quot;warn&quot; 或 1 - 开启规则，使用警告级别的错误：warn (不会导致程序退出) # &quot;error&quot; 或 2 - 开启规则，使用错误级别的错误：error (当被触发的时候，程序会退出) # &quot;规则名&quot;: [规则值, 规则配置] &quot;no-multiple-empty-lines&quot;: [&quot;off&quot;|0, &#123;&quot;max&quot;: 100&#125;], &quot;rules&quot;: &#123; &quot;no-alert&quot;: 0,//禁止使用alert confirm prompt &quot;no-array-constructor&quot;: 2,//禁止使用数组构造器 &quot;no-bitwise&quot;: 0,//禁止使用按位运算符 &quot;no-caller&quot;: 1,//禁止使用arguments.caller或arguments.callee &quot;no-catch-shadow&quot;: 2,//禁止catch子句参数与外部作用域变量同名 &quot;no-class-assign&quot;: 2,//禁止给类赋值 &quot;no-cond-assign&quot;: 2,//禁止在条件表达式中使用赋值语句 &quot;no-console&quot;: 2,//禁止使用console &quot;no-const-assign&quot;: 2,//禁止修改const声明的变量 &quot;no-constant-condition&quot;: 2,//禁止在条件中使用常量表达式 if(true) if(1) &quot;no-continue&quot;: 0,//禁止使用continue &quot;no-control-regex&quot;: 2,//禁止在正则表达式中使用控制字符 &quot;no-debugger&quot;: 2,//禁止使用debugger &quot;no-delete-var&quot;: 2,//不能对var声明的变量使用delete操作符 &quot;no-div-regex&quot;: 1,//不能使用看起来像除法的正则表达式/=foo/ &quot;no-dupe-keys&quot;: 2,//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125; &quot;no-dupe-args&quot;: 2,//函数参数不能重复 &quot;no-duplicate-case&quot;: 2,//switch中的case标签不能重复 &quot;no-else-return&quot;: 2,//如果if语句里面有return,后面不能跟else语句 &quot;no-empty&quot;: 2,//块语句中的内容不能为空 &quot;no-empty-character-class&quot;: 2,//正则表达式中的[]内容不能为空 &quot;no-empty-label&quot;: 2,//禁止使用空label &quot;no-eq-null&quot;: 2,//禁止对null使用==或!=运算符 &quot;no-eval&quot;: 1,//禁止使用eval &quot;no-ex-assign&quot;: 2,//禁止给catch语句中的异常参数赋值 &quot;no-extend-native&quot;: 2,//禁止扩展native对象 &quot;no-extra-bind&quot;: 2,//禁止不必要的函数绑定 &quot;no-extra-boolean-cast&quot;: 2,//禁止不必要的bool转换 &quot;no-extra-parens&quot;: 2,//禁止非必要的括号 &quot;no-extra-semi&quot;: 2,//禁止多余的冒号 &quot;no-fallthrough&quot;: 1,//禁止switch穿透 &quot;no-floating-decimal&quot;: 2,//禁止省略浮点数中的0 .5 3. &quot;no-func-assign&quot;: 2,//禁止重复的函数声明 &quot;no-implicit-coercion&quot;: 1,//禁止隐式转换 &quot;no-implied-eval&quot;: 2,//禁止使用隐式eval &quot;no-inline-comments&quot;: 0,//禁止行内备注 &quot;no-inner-declarations&quot;: [2, &quot;functions&quot;],//禁止在块语句中使用声明（变量或函数） &quot;no-invalid-regexp&quot;: 2,//禁止无效的正则表达式 &quot;no-invalid-this&quot;: 2,//禁止无效的this，只能用在构造器，类，对象字面量 &quot;no-irregular-whitespace&quot;: 2,//不能有不规则的空格 &quot;no-iterator&quot;: 2,//禁止使用__iterator__ 属性 &quot;no-label-var&quot;: 2,//label名不能与var声明的变量名相同 &quot;no-labels&quot;: 2,//禁止标签声明 &quot;no-lone-blocks&quot;: 2,//禁止不必要的嵌套块 &quot;no-lonely-if&quot;: 2,//禁止else语句内只有if语句 &quot;no-loop-func&quot;: 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以） &quot;no-mixed-requires&quot;: [0, false],//声明时不能混用声明类型 &quot;no-mixed-spaces-and-tabs&quot;: [2, false],//禁止混用tab和空格 &quot;linebreak-style&quot;: [0, &quot;windows&quot;],//换行风格 &quot;no-multi-spaces&quot;: 1,//不能用多余的空格 &quot;no-multi-str&quot;: 2,//字符串不能用\\换行 &quot;no-multiple-empty-lines&quot;: [1, &#123;&quot;max&quot;: 2&#125;],//空行最多不能超过2行 &quot;no-native-reassign&quot;: 2,//不能重写native对象 &quot;no-negated-in-lhs&quot;: 2,//in 操作符的左边不能有! &quot;no-nested-ternary&quot;: 0,//禁止使用嵌套的三目运算 &quot;no-new&quot;: 1,//禁止在使用new构造一个实例后不赋值 &quot;no-new-func&quot;: 1,//禁止使用new Function &quot;no-new-object&quot;: 2,//禁止使用new Object() &quot;no-new-require&quot;: 2,//禁止使用new require &quot;no-new-wrappers&quot;: 2,//禁止使用new创建包装实例，new String new Boolean new Number &quot;no-obj-calls&quot;: 2,//不能调用内置的全局对象，比如Math() JSON() &quot;no-octal&quot;: 2,//禁止使用八进制数字 &quot;no-octal-escape&quot;: 2,//禁止使用八进制转义序列 &quot;no-param-reassign&quot;: 2,//禁止给参数重新赋值 &quot;no-path-concat&quot;: 0,//node中不能使用__dirname或__filename做路径拼接 &quot;no-plusplus&quot;: 0,//禁止使用++，-- &quot;no-process-env&quot;: 0,//禁止使用process.env &quot;no-process-exit&quot;: 0,//禁止使用process.exit() &quot;no-proto&quot;: 2,//禁止使用__proto__属性 &quot;no-redeclare&quot;: 2,//禁止重复声明变量 &quot;no-regex-spaces&quot;: 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/ &quot;no-restricted-modules&quot;: 0,//如果禁用了指定模块，使用就会报错 &quot;no-return-assign&quot;: 1,//return 语句中不能有赋值表达式 &quot;no-script-url&quot;: 0,//禁止使用javascript:void(0) &quot;no-self-compare&quot;: 2,//不能比较自身 &quot;no-sequences&quot;: 0,//禁止使用逗号运算符 &quot;no-shadow&quot;: 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名 &quot;no-shadow-restricted-names&quot;: 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用 &quot;no-spaced-func&quot;: 2,//函数调用时 函数名与()之间不能有空格 &quot;no-sparse-arrays&quot;: 2,//禁止稀疏数组， [1,,2] &quot;no-sync&quot;: 0,//nodejs 禁止同步方法 &quot;no-ternary&quot;: 0,//禁止使用三目运算符 &quot;no-trailing-spaces&quot;: 1,//一行结束后面不要有空格 &quot;no-this-before-super&quot;: 0,//在调用super()之前不能使用this或super &quot;no-throw-literal&quot;: 2,//禁止抛出字面量错误 throw &quot;error&quot;; &quot;no-undef&quot;: 1,//不能有未定义的变量 &quot;no-undef-init&quot;: 2,//变量初始化时不能直接给它赋值为undefined &quot;no-undefined&quot;: 2,//不能使用undefined &quot;no-unexpected-multiline&quot;: 2,//避免多行表达式 &quot;no-underscore-dangle&quot;: 1,//标识符不能以_开头或结尾 &quot;no-unneeded-ternary&quot;: 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false; &quot;no-unreachable&quot;: 2,//不能有无法执行的代码 &quot;no-unused-expressions&quot;: 2,//禁止无用的表达式 &quot;no-unused-vars&quot;: [2, &#123;&quot;vars&quot;: &quot;all&quot;, &quot;args&quot;: &quot;after-used&quot;&#125;],//不能有声明后未被使用的变量或参数 &quot;no-use-before-define&quot;: 2,//未定义前不能使用 &quot;no-useless-call&quot;: 2,//禁止不必要的call和apply &quot;no-void&quot;: 2,//禁用void操作符 &quot;no-var&quot;: 0,//禁用var，用let和const代替 &quot;no-warning-comments&quot;: [1, &#123; &quot;terms&quot;: [&quot;todo&quot;, &quot;fixme&quot;, &quot;xxx&quot;], &quot;location&quot;: &quot;start&quot; &#125;],//不能有警告备注 &quot;no-with&quot;: 2,//禁用with &quot;array-bracket-spacing&quot;: [2, &quot;never&quot;],//是否允许非空数组里面有多余的空格 &quot;arrow-parens&quot;: 0,//箭头函数用小括号括起来 &quot;arrow-spacing&quot;: 0,//=&gt;的前/后括号 &quot;accessor-pairs&quot;: 0,//在对象中使用getter/setter &quot;block-scoped-var&quot;: 0,//块语句中使用var &quot;brace-style&quot;: [1, &quot;1tbs&quot;],//大括号风格 &quot;callback-return&quot;: 1,//避免多次调用回调什么的 &quot;camelcase&quot;: 2,//强制驼峰法命名 &quot;comma-dangle&quot;: [2, &quot;never&quot;],//对象字面量项尾不能有逗号 &quot;comma-spacing&quot;: 0,//逗号前后的空格 &quot;comma-style&quot;: [2, &quot;last&quot;],//逗号风格，换行时在行首还是行尾 &quot;complexity&quot;: [0, 11],//循环复杂度 &quot;computed-property-spacing&quot;: [0, &quot;never&quot;],//是否允许计算后的键名什么的 &quot;consistent-return&quot;: 0,//return 后面是否允许省略 &quot;consistent-this&quot;: [2, &quot;that&quot;],//this别名 &quot;constructor-super&quot;: 0,//非派生类不能调用super，派生类必须调用super &quot;curly&quot;: [2, &quot;all&quot;],//必须使用 if()&#123;&#125; 中的&#123;&#125; &quot;default-case&quot;: 2,//switch语句最后必须有default &quot;dot-location&quot;: 0,//对象访问符的位置，换行的时候在行首还是行尾 &quot;dot-notation&quot;: [0, &#123; &quot;allowKeywords&quot;: true &#125;],//避免不必要的方括号 &quot;eol-last&quot;: 0,//文件以单一的换行符结束 &quot;eqeqeq&quot;: 2,//必须使用全等 &quot;func-names&quot;: 0,//函数表达式必须有名字 &quot;func-style&quot;: [0, &quot;declaration&quot;],//函数风格，规定只能使用函数声明/函数表达式 &quot;generator-star-spacing&quot;: 0,//生成器函数*的前后空格 &quot;guard-for-in&quot;: 0,//for in循环要用if语句过滤 &quot;handle-callback-err&quot;: 0,//nodejs 处理错误 &quot;id-length&quot;: 0,//变量名长度 &quot;indent&quot;: [2, 4],//缩进风格 &quot;init-declarations&quot;: 0,//声明时必须赋初值 &quot;key-spacing&quot;: [0, &#123; &quot;beforeColon&quot;: false, &quot;afterColon&quot;: true &#125;],//对象字面量中冒号的前后空格 &quot;lines-around-comment&quot;: 0,//行前/行后备注 &quot;max-depth&quot;: [0, 4],//嵌套块深度 &quot;max-len&quot;: [0, 80, 4],//字符串最大长度 &quot;max-nested-callbacks&quot;: [0, 2],//回调嵌套深度 &quot;max-params&quot;: [0, 3],//函数最多只能有3个参数 &quot;max-statements&quot;: [0, 10],//函数内最多有几个声明 &quot;new-cap&quot;: 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用 &quot;new-parens&quot;: 2,//new时必须加小括号 &quot;newline-after-var&quot;: 2,//变量声明后是否需要空一行 &quot;object-curly-spacing&quot;: [0, &quot;never&quot;],//大括号内是否允许不必要的空格 &quot;object-shorthand&quot;: 0,//强制对象字面量缩写语法 &quot;one-var&quot;: 1,//连续声明 &quot;operator-assignment&quot;: [0, &quot;always&quot;],//赋值运算符 += -=什么的 &quot;operator-linebreak&quot;: [2, &quot;after&quot;],//换行时运算符在行尾还是行首 &quot;padded-blocks&quot;: 0,//块语句内行首行尾是否要空行 &quot;prefer-const&quot;: 0,//首选const &quot;prefer-spread&quot;: 0,//首选展开运算 &quot;prefer-reflect&quot;: 0,//首选Reflect的方法 &quot;quotes&quot;: [1, &quot;single&quot;],//引号类型 `` &quot;&quot; &apos;&apos; &quot;quote-props&quot;:[2, &quot;always&quot;],//对象字面量中的属性名是否强制双引号 &quot;radix&quot;: 2,//parseInt必须指定第二个参数 &quot;id-match&quot;: 0,//命名检测 &quot;require-yield&quot;: 0,//生成器函数必须有yield &quot;semi&quot;: [2, &quot;always&quot;],//语句强制分号结尾 &quot;semi-spacing&quot;: [0, &#123;&quot;before&quot;: false, &quot;after&quot;: true&#125;],//分号前后空格 &quot;space-after-keywords&quot;: [0, &quot;always&quot;],//关键字后面是否要空一格 &quot;space-before-blocks&quot;: [0, &quot;always&quot;],//不以新行开始的块&#123;前面要不要有空格 &quot;space-before-function-paren&quot;: [0, &quot;always&quot;],//函数定义时括号前面要不要有空格 &quot;space-in-parens&quot;: [0, &quot;never&quot;],//小括号里面要不要有空格 &quot;space-infix-ops&quot;: 0,//中缀操作符周围要不要有空格 &quot;space-return-throw-case&quot;: 2,//return throw case后面要不要加空格 &quot;space-unary-ops&quot;: [0, &#123; &quot;words&quot;: true, &quot;nonwords&quot;: false &#125;],//一元运算符的前/后要不要加空格 &quot;spaced-comment&quot;: 0,//注释风格要不要有空格什么的 &quot;strict&quot;: 2,//使用严格模式 &quot;use-isnan&quot;: 2,//禁止比较时使用NaN，只能用isNaN() &quot;valid-jsdoc&quot;: 0,//jsdoc规则 &quot;valid-typeof&quot;: 2,//必须使用合法的typeof的值 &quot;vars-on-top&quot;: 2,//var必须放在作用域顶部 &quot;wrap-iife&quot;: [2, &quot;inside&quot;],//立即执行函数表达式的小括号风格 &quot;wrap-regex&quot;: 0,//正则表达式字面量用小括号包起来 &quot;yoda&quot;: [2, &quot;never&quot;]//禁止尤达条件 &#125;&#125; 2.1. Tslint&emsp;&emsp;TSLint 是一个非常好用的开源 TypeScript 代码风格检查器 &emsp;&emsp;npm 安装（v7+） 12 npm install tslint --save-devor npm install tslint --global 全局安装 运行 tslint --init 之后，tslint.json 文件会在你的文件夹中自动创建。你可以在 .json 文件中看到许多像这样的规则 123456789&#123; &quot;defaultSeverity&quot;: &quot;error&quot;, &quot;extends&quot;: [ &quot;tslint:recommended&quot; ], &quot;jsRules&quot;: &#123;&#125;, &quot;rules&quot;: &#123;&#125;, &quot;rulesDirectory&quot;: []&#125; Ps. tslint 也可以像eslint一样在文件中通过备注配置lint规则（/* tslint:disable */） ，也可以是json，xml,yml格式 我们可以以 tslint \\&quot;./app/**/*.ts\\&quot; 的方式来进行命令式运行（tslint命令） 具体配置项： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103&#123; &quot;defaultSeverity&quot;: &quot;error&quot;, - &quot;error&quot; | &quot;warning&quot; | &quot;off&quot; 严重性设置,如果未定义，则将“error”用作defaultSeverity。 &quot;extends&quot;: [ &quot;tslint:recommended&quot; - 继承规则（tslint:latest | tslint:all） ], &quot;rulesDirectory&quot;: []. - 自定义规则的目录路径或者路径数组 &quot;jsRules&quot;: &#123; - any | boolean 对js 和jsx文件的规则 若为true的时候则使用js兼容性规则（默认配置） &quot;max-line-length&quot;: &#123; &quot;options&quot;: [120] &#125; &#125;, linterOptions: &#123; exclude: string[] - 不进行lint操作的文件数组 &#125; &quot;rules&quot;: &#123; &quot;member-access&quot;: true, // 设置成员对象的访问权限（public,private,protect) &quot;member-ordering&quot;: [// 设置修饰符顺序 true, &#123; &quot;order&quot;: [ &quot;public-static-field&quot;, &quot;public-static-method&quot;, &quot;protected-static-field&quot;, &quot;protected-static-method&quot;, &quot;private-static-field&quot;, &quot;private-static-method&quot;, &quot;public-instance-field&quot;, &quot;protected-instance-field&quot;, &quot;private-instance-field&quot;, &quot;public-constructor&quot;, &quot;protected-constructor&quot;, &quot;private-constructor&quot;, &quot;public-instance-method&quot;, &quot;protected-instance-method&quot;, &quot;private-instance-method&quot; ] &#125; ], &quot;no-empty-interface&quot;:true,// 不允许空接口 &quot;no-parameter-reassignment&quot;:true,// 不允许修改方法输入参数 &quot;prefer-for-of&quot;:true,// 如果for循环中没有使用索引，建议是使用for-of // 功能特性 &quot;await-promise&quot;:true,// 不允许没有Promise的情况下使用await &quot;curly&quot;:true,// if/for/do/while强制使用大括号 &quot;forin&quot;:true,// 使用for in语句时，强制进行hasOwnProperty检查 &quot;no-arg&quot;:true,// 不允许使用arguments.callee // &quot;no-bitwise&quot;:true, // 不允许使用特殊运算符 &amp;, &amp;=, |, |=, ^, ^=, &lt;&lt;, &lt;&lt;=, &gt;&gt;, &gt;&gt;=, &gt;&gt;&gt;, &gt;&gt;&gt;=, ~ &quot;no-conditional-assignment&quot;:true,// do while/for/if/while 语句中将会对例如if(a=b)进行检查 // &quot;no-console&quot;:true,// 不允许使用console对象 &quot;no-debugger&quot;:true,// 不允许使用debugger &quot;no-duplicate-super&quot;:true,// 不允许super() 两次使用在构造函数中 &quot;no-empty&quot;:true,// 函数体不允许空 &quot;no-eval&quot;:true,// 不允许使用eval &quot;no-for-in-array&quot;:true,// 不允许对Array使用for-in &quot;no-invalid-template-strings&quot;:true,// 只允许在模板字符串中使用$&#123; &quot;no-invalid-this&quot;:true,// 不允许在class之外使用this &quot;no-null-keyword&quot;:true,// 不允许使用null,使用undefined代替null，指代空指针对象 &quot;no-sparse-arrays&quot;:true,// 不允许array中有空元素 &quot;no-string-throw&quot;:true,// 不允许throw一个字符串 &quot;no-switch-case-fall-through&quot;:true,// 不允许case段落中在没有使用breack的情况下，在新启一段case逻辑 &quot;no-unsafe-finally&quot;:true,// 不允许在finally语句中使用return/continue/break/throw &quot;no-unused-expression&quot;:true,// 不允许使用未使用的表达式 &quot;no-use-before-declare&quot;:true,// 在使用前必须声明 &quot;no-var-keyword&quot;:true,// 不允许使用var &quot;radix&quot;:true,// parseInt时，必须输入radix精度参数 &quot;restrict-plus-operands&quot;:true,// 不允许自动类型转换，如果已设置不允许使用关键字var该设置无效 &quot;triple-equals&quot;:true,// 必须使用恒等号，进行等于比较 &quot;use-isnan&quot;:true,// 只允许使用isNaN方法检查数字是否有效 // 维护性功能 &quot;indent&quot;:[true, &quot;spaces&quot;, 4],// 每行开始以4个空格符开始 &quot;linebreak-style&quot;:[true,&quot;CR/LF&quot;],// 换行符格式 CR/LF可以通用使用在windows和osx &quot;max-classes-per-file&quot;:[true,1],// 每个文件中可定义类的个数 &quot;max-file-line-count&quot;:[true,500],// 定义每个文件代码行数 &quot;max-line-length&quot;:[true,120],// 定义每行代码数 &quot;no-default-export&quot;:true,// 禁止使用export default关键字，因为当export对象名称发生变化时，需要修改import中的对象名。https://github.com/palantir/tslint/issues/1182#issue-151780453 &quot;no-duplicate-imports&quot;:true,// 禁止在一个文件内，多次引用同一module // 格式 &quot;align&quot;:[true,&quot;parameters&quot;,&quot;arguments&quot;,&quot;statements&quot;,&quot;members&quot;,&quot;elements&quot;],// 定义对齐风格 &quot;array-type&quot;:[true,&quot;array&quot;],// 建议使用T[]方式声明一个数组对象 &quot;class-name&quot;:true,// 类名以大驼峰格式命名 &quot;comment-format&quot;:[true, &quot;check-space&quot;],// 定义注释格式 &quot;encoding&quot;:true,// 定义编码格式默认utf-8 &quot;import-spacing&quot;:true,// import关键字后加空格 &quot;interface-name&quot;:[true,&quot;always-prefix&quot;],// interface必须以I开头 &quot;jsdoc-format&quot;:true,// 注释基于jsdoc风格 &quot;new-parens&quot;:true,// 调用构造函数时需要用括号 &quot;no-consecutive-blank-lines&quot;:[true,2],// 不允许有空行 &quot;no-trailing-whitespace&quot;: [// 不允许空格结尾 true, &quot;ignore-comments&quot;, &quot;ignore-jsdoc&quot; ], &quot;no-unnecessary-initializer&quot;:true,// 不允许没有必要的初始化 &quot;variable-name&quot;:[true,&quot;check-format&quot;,// 定义变量命名规则 &quot;allow-leading-underscore&quot;, &quot;allow-trailing-underscore&quot;, &quot;ban-keywords&quot;] &#125; &#125; 2.3 prettier&emsp;&emsp;Prettier （code beautiful）听得可能就比较少，但是他绝对是个利器 可能我们在code的时候一些空格、分号习惯并不会注意，等到lint的时候改起来就会很烦，Prettier就可以帮我们自动搞定这些，只要我们配置文件固定，执行命令就会按照标准去西东转换风格。最主要还支持css &emsp;&emsp;npm 安装 1npm install prettier --dev 在根目录下创建 .prettierrc 文件 同时也支持.yaml/.yml/.json/.js 使用很简单 1prettier -l --write &apos;src/**/*.&#123;ts,tsx,less,css&#125;&apos; --no-semi --single-quote 后面的--no-semi --single-quote 完全可以在配置文件里配置 也可以写在命令行里执行也可以做代码检查 1&quot;prettier -l &apos;src/**/*.&#123;ts,tsx,less,css&#125;&apos; --no-semi --single-quote 基本配置如下(配置很少的): 12345678910&#123; &quot;printWidth&quot;: 80, //一行的字符数，如果超过会进行换行，默认为80 &quot;tabWidth&quot;: 2, //一个tab代表几个空格数，默认为80 &quot;useTabs&quot;: false, //是否使用tab进行缩进，默认为false，表示用空格进行缩减 &quot;singleQuote&quot;: false, //字符串是否使用单引号，默认为false，使用双引号 &quot;semi&quot;: true, //行位是否使用分号，默认为true &quot;trailingComma&quot;: &quot;none&quot;, //是否使用尾逗号，有三个可选值&quot;&lt;none|es5|all&gt;&quot; &quot;bracketSpacing&quot;: true, //对象大括号直接是否有空格，默认为true，效果：&#123; foo: bar &#125; &quot;parser&quot;: &quot;babylon&quot; //代码的解析引擎，默认为babylon，与babel相同。&#125; 总之&emsp;&emsp;其实上述一些配置也可以写到package.json中，但是我并不是很喜欢，那样会使package.json看起来很繁琐，并且package.json 里面对eslint tslint等的配置等级最低 &emsp;&emsp;代码规范很重要，在以前的公司的时候开发很随意就导致我写代码很粗暴很狂野，这样很不好，也没有什么规范可言，后面别人接受项目时也会一万头草泥马。 &emsp;&emsp;新换工作之后接手公司项目读代码的时候发现，这代码风格，这代码规范真的很棒。并且对codereview的人来说也很轻松。"}]