{"version":3,"sources":["logo.svg","App.js","commpoents/c-header/index.js","utils/request.js","commpoents/c-toast/index.js","routes/login/index.js","serviceWorker.js","index.js","router.js"],"names":["module","exports","__webpack_require__","p","App","Index","_react_16_8_6_react_default","a","createElement","className","this","props","title","Component","requestHeader","Accept","Content-Type","mode","checkStatus","response","status","request","url","newOptions","arguments","length","undefined","Promise","race","fetch","resolve","reject","setTimeout","Error","then","json","catch","e","name","errorCode","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentWillMount","setState","display","hidden","type","componentWillReceiveProps","nextProps","console","log","state","style","isiOS","navigator","userAgent","match","send","params","showMessage","sendMessage","verificaDis","countdown","stringify","method","headers","credentials","_ref","code","data","verificaCode","captcha","submitDis","_this$state","time","phone","test","login","_this$state2","toastHidden","objectSpread","body","JSON","_ref2","toastType","phoneComfirm","event","persist","value","target","captchaChange","componentWillUnmount","_this$state3","commpoents_c_header","id","pattern","width","background","onChange","placeholder","disabled","Value","onClick","debounce","color","class","commpoents_c_toast","Boolean","window","location","hostname","ReactDOM","render","react_router_dom","react_router","exact","path","component","Login","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b50371fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react'\r\nimport './index.less'\r\nclass Index extends Component {\r\n    render() {\r\n        return (\r\n            <div className='c-header'>\r\n                <i className=\"iconfont icon-icon_chexiao c-header-goBack\"></i>\r\n                <span className=\"c-header-title\">{this.props.title}</span>\r\n            </div>)\r\n    }\r\n}\r\nexport default Index","import React from 'react'\r\nimport { stringify } from 'qs';\r\nimport 'whatwg-fetch';\r\nconst requestHeader = {\r\n    'Accept': 'application/json',\r\n    'Content-Type': 'application/json;charset=utf-8',\r\n    'mode': \"cors\",\r\n}\r\nfunction checkStatus(response) {\r\n    if (response.status >= 200 && response.status < 300) {\r\n        return response;\r\n    }\r\n}\r\n\r\n/**\r\n * Requests a URL, returning a promise.\r\n *\r\n * @param  {string} url       The URL we want to request\r\n * @param  {object} [options] The options we want to pass to \"fetch\"\r\n * @return {object}           An object containing either \"data\" or \"err\"\r\n */\r\nfunction request(url, newOptions, showMessage = true) {\r\n    return Promise.race([\r\n        fetch(url, newOptions),\r\n        new Promise(function (resolve, reject) {\r\n            setTimeout(() => reject(new Error('request timeout')), 30000)\r\n        })])\r\n        .then(checkStatus)\r\n        .then(response => {\r\n            return response.json()\r\n        })\r\n        .catch(e => {\r\n            // const { dispatch } = store;\r\n            const status = e.name;\r\n            if (status === 302 && showMessage) {\r\n                return {\r\n                    errorCode: 1,\r\n                };\r\n            }\r\n            if (status === 401) {\r\n                return {\r\n                    errorCode: 1,\r\n                };\r\n            }\r\n            if (status === 403) {\r\n                return {\r\n                    errorCode: 1,\r\n                };\r\n            }\r\n            if (status <= 504 && status >= 500) {\r\n                return {\r\n                    errorCode: 1,\r\n                };\r\n            }\r\n            if (status >= 404 && status < 422) {\r\n                return {\r\n                    errorCode: 1,\r\n                };\r\n            }\r\n            //其他情况跳转到登录页面\r\n            else {\r\n                return {\r\n                    errorCode: 1,\r\n                };\r\n            }\r\n        });\r\n}\r\n/**\r\n * \r\n * @param {string} url 请求地址\r\n * @param {any} params 请求参数\r\n * @param {Boolean} showMessage 是否显示错误提示，默认为false \r\n */\r\nfunction GET(url, params, showMessage) {\r\n    let _params = !!params ? \"?\" + stringify(params) : \"\";\r\n    return request(url + _params, {\r\n        method: \"GET\",\r\n        headers: requestHeader,\r\n        credentials: 'include'\r\n    }, showMessage)\r\n}\r\n\r\n/**\r\n * \r\n * @param {string} url 请求地址\r\n * @param {any} params 请求参数\r\n * @param {Boolean} showMessage 是否显示错误提示，默认为false \r\n */\r\nfunction POST(url, params, showMessage) {\r\n    return request(url, {\r\n        method: \"POST\",\r\n        headers: { ...requestHeader },\r\n        body: JSON.stringify(params),\r\n        credentials: 'include',\r\n    }, showMessage)\r\n}\r\nexport { GET };\r\nexport { POST };\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport './index.less'\r\nclass Index extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            display: false,\r\n            type: 'loading'\r\n        }\r\n    }\r\n    componentWillMount = () => {\r\n        this.setState({\r\n            display: !this.props.hidden,\r\n            type: this.props.type||'loading'\r\n        })\r\n    }\r\n    componentWillReceiveProps = (nextProps) => {\r\n        if (nextProps.hidden !== this.props.hidden) {\r\n            this.setState({\r\n                display: !nextProps.hidden\r\n            })\r\n        }\r\n        if (nextProps.type != 'loading') {\r\n            console.log('状态改变：',nextProps.type)\r\n            this.setState({\r\n                type: nextProps.type\r\n            }, () => {\r\n                setTimeout(()=>this.setState({\r\n                    display: false,\r\n                    type: 'loading'\r\n                }), 3000)\r\n            })\r\n        }\r\n    }\r\n    render() {\r\n        const { type } = this.state\r\n        return (\r\n            <div className='c-toast' style={this.state.display ? null : { display: 'none' }}>\r\n                <div className='c-toast-p'>\r\n                </div>\r\n                {\r\n                    type == 'loading' ?\r\n                        <span className='c-toast-loading'><i className=\"iconfont icon-loading c-toast-loading-font\"></i></span> :\r\n                        type == 'success' ?\r\n                            <span className='c-toast-success'><i className=\"iconfont icon-zhengque c-toast-loading-success\"></i></span> :\r\n                            <span className='c-toast-error'><i className=\"iconfont icon-icon-icon2 c-toast-loading-error\"></i></span>\r\n                }\r\n            </div>)\r\n\r\n    }\r\n}\r\nexport default Index","import React, { Component } from 'react'\r\n// import { List, InputItem, Button } from 'antd-mobile'\r\nimport './index.less'\r\nimport Header from '../../commpoents/c-header'\r\nimport { GET, POST } from '../../utils/request.js'\r\n//lodash 防抖\r\nimport { debounce } from 'lodash'\r\n//自己手写一个loading组件\r\nimport Toast from '../../commpoents/c-toast'\r\n//判断终端  用于弹起键盘\r\nlet u = navigator.userAgent;\r\n//iOS终端\r\nvar isiOS = !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/);\r\n\r\nclass Index extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            verificaDis: true,  //验证码按钮不可用\r\n            time: 60,\r\n            sendMessage: false,   //是否处于发送状态\r\n            submitDis: true,  //登录按钮知否可用\r\n            verificaCode: null,\r\n            toastHidden:true,  //加载框显示\r\n            toastType:'loading'  //状态\r\n        }\r\n    }\r\n    //发送请求\r\n    send = () => {\r\n        if (this.state.sendMessage) {\r\n            return\r\n        }\r\n        else {\r\n            this.setState({\r\n                verificaDis: true,\r\n                sendMessage: true,\r\n            }, this.countdown)\r\n\r\n        }\r\n        //过去验证码\r\n        GET(\"https://easy-mock.com/mock/5b2385e3debe3c5977248a16/wscn/captcha\")\r\n            .then(({ code, data }) => {\r\n                if (code == 200) {\r\n                    //获取到验证码并且回填\r\n                    this.setState({\r\n                        verificaCode: data.captcha,\r\n                        submitDis: false,\r\n                    })\r\n                }\r\n                else {\r\n                }\r\n            })\r\n    }\r\n    //倒计时\r\n    countdown = () => {\r\n        let { time, phone, verificaCode } = this.state\r\n        this.setState({\r\n            time: --time\r\n        }, () => {\r\n            if (this.state.time > 0)\r\n                setTimeout(this.countdown, 1000)\r\n            else {   // 计时完成\r\n                let phoneReg = /(^1[3|4|5|7|8]\\d{9}$)|(^09\\d{8}$)/;\r\n                //计时完成校验\r\n                if (!!phoneReg.test(phone)) {\r\n                    this.setState({\r\n                        verificaDis: false,  //验证码按钮不可用\r\n                        time: 60,\r\n                        sendMessage: false,   //是否处于发送状态\r\n                    })\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        verificaDis: true,  //验证码按钮不可用\r\n                        time: 60,\r\n                        sendMessage: false,   //是否处于发送状态\r\n                    })\r\n                }\r\n\r\n            }\r\n        })\r\n    }\r\n    //登陆点击事件\r\n    login = () => {\r\n        let { phone, verificaCode } = this.state\r\n        this.setState({\r\n            toastHidden:false\r\n        })\r\n        POST(\"https://easy-mock.com/mock/5b2385e3debe3c5977248a16/wscn/submit\",{phone:phone,captcha:verificaCode})\r\n            .then(({ code, data }) => {\r\n                if (code == 200) {\r\n                   this.setState({\r\n                    toastType:'success'\r\n                })\r\n                }\r\n                else {\r\n\r\n                }\r\n            })\r\n    }\r\n    //手机号校验事件\r\n    phoneComfirm = (event) => {\r\n        event.persist()\r\n        let value = event.target.value\r\n        let phoneReg = /(^1[3|4|5|7|8]\\d{9}$)|(^09\\d{8}$)/;\r\n        //手机号码验证成功\r\n        if (!!phoneReg.test(value) && !this.state.sendMessage) {\r\n            this.setState({\r\n                verificaDis: false,\r\n                phone: value\r\n            })\r\n            return\r\n        }\r\n        this.setState({\r\n            verificaDis: true,\r\n            submitDis: true,\r\n            phone: value\r\n        })\r\n    }\r\n    //验证码改变事件\r\n    captchaChange = (event) => {\r\n        event.persist()\r\n        let value = event.target.value\r\n        let captchaReg = /^\\d{4}$/;\r\n        //手机号码验证成功\r\n        if (!!captchaReg.test(value)) {\r\n            this.setState({\r\n                verificaCode: value,\r\n                submitDis: false\r\n            })\r\n            return\r\n        }\r\n        this.setState({\r\n            verificaCode: value,\r\n            submitDis: true\r\n        })\r\n\r\n    }\r\n    componentWillUnmount = ()=>{\r\n        //离开页面之前恢复初始数据\r\n        this.setState({\r\n            verificaDis: true,  //验证码按钮不可用\r\n            time: 60,\r\n            sendMessage: false,   //是否处于发送状态\r\n            submitDis: true,  //登录按钮知否可用\r\n            verificaCode: null,\r\n            toastHidden:true,  //加载框显示\r\n            toastType:'loading'  //状态\r\n        })\r\n    }\r\n    render() {\r\n        const { phone, verificaCode, verificaDis, sendMessage, submitDis,toastType ,toastHidden} = this.state\r\n        return (\r\n            <div className='app-login'>\r\n                <Header title=\"登陆\" />\r\n                <div className='app-login-body'>\r\n                    <h1>Hi,</h1>\r\n                    <h1>欢迎登陆 XXXX</h1>\r\n                    <form>\r\n                        <div className='form'>\r\n                            <div className='form-input'>\r\n                                <input id=\"phone\" type=\"number\" pattern={isiOS ? \"[0-9]*\" : \"\\d*\"} style={verificaCode ? { width: '100%', background: '#E3E3E3' } : { width: '100%' }} onChange={this.phoneComfirm} placeholder=\"手机号\" value={phone} disabled={verificaCode ? true : false} />\r\n                            </div>\r\n                        </div>\r\n                        <div className='form'>\r\n                            <div className='form-input'>\r\n                                <input id=\"verification\" type=\"number\" pattern=\"\\d*\" style={{ width: '100%' }} placeholder=\"验证码\" Value={verificaCode} onChange={this.captchaChange} />\r\n                            </div>\r\n                            <span className=\"form-input-btn\" onClick={verificaDis ? null : debounce(this.send, 300)} style={verificaDis ? { color: '#ccc' } : { color: 'rgb(4, 179, 77)' }}>{sendMessage ? '重新发送(' + this.state.time + 's)' : '点击获取验证码'}</span>\r\n\r\n                        </div>\r\n                        <button className='form-submit' onClick={submitDis || !verificaCode ? null : this.login} style={submitDis || !verificaCode ? { background: '#cccccc' } : undefined}>登录</button>\r\n                    </form>\r\n\r\n                    <div className='login-footer'>\r\n                        <div class=\"footer-hr\">\r\n                            <span class=\"line\"></span>\r\n                            <span class=\"text\">其他登录方式</span>\r\n                            <span class=\"line\"></span>\r\n                        </div>\r\n                        <div className='login-footer-content'>\r\n                            <div className=\"login-weixin\">\r\n                                <i className=\"iconfont icon-weixin\"></i>\r\n                                <div>微信登陆</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                    <Toast hidden={toastHidden} type={toastType}/>\r\n                </div>\r\n                {/* 本来打算使用antd mobile 直接写的，但是既然要实现，就自己手写一个吧 */}\r\n                {/* <List>\r\n                    <InputItem\r\n                        // value={userName}\r\n                        placeholder=\"请输入用户名\"\r\n                        onChange={value => this.setState({ userName: value })}\r\n                    >\r\n                        <div style={{ backgroundImage: 'url(https://zos.alipayobjects.com/rmsportal/DfkJHaJGgMghpXdqNaKF.png)', backgroundSize: 'cover', height: '22px', width: '22px' }} />\r\n                    </InputItem>\r\n                    <InputItem\r\n                        // value={password}\r\n                        onChange={password => this.setState({ password })}\r\n                        placeholder=\"请输入密码\"\r\n                    >\r\n                        <div style={{ backgroundImage: 'url(https://zos.alipayobjects.com/rmsportal/DfkJHaJGgMghpXdqNaKF.png)', backgroundSize: 'cover', height: '22px', width: '22px' }} />\r\n                    </InputItem>\r\n                    <button type=\"primary\" onClick={this.login}>登录</button>\r\n                </List> */}\r\n            </div>)\r\n    }\r\n}\r\nexport default Index","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport Router from './router'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(Router(), document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react'\r\nimport { Router, Route, HashRouter } from 'react-router-dom'\r\nimport Login from './routes/login/index'\r\nexport default function RouterConfig() {\r\n    return (<HashRouter>\r\n        <Route exact path='/login' component={Login} />\r\n    </HashRouter>)\r\n\r\n}"],"sourceRoot":""}